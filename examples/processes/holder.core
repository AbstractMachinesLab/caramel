module 'holder' ['do_work'/0,
		 'handle_message'/2,
		 'loop'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'start'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[104|[111|[108|[100|[101|[114|[46|[101|[114|[108]]]]]]]]]],1}]]
'handle_message'/2 =
    %% Line 9
    ( fun (_0,_1) ->
	  %% Line 10
	  case _0 of
	    <{X,Y}> when 'true' ->
		%% Line 11
		case _1 of
		  %% Line 12
		  <{'some','reset'}> when 'true' ->
		      {#{}#,0}
		  %% Line 13
		  <{'some',{'add',Z}}> when 'true' ->
		      {X,Z}
		  %% Line 14
		  <{'some',{'hello',N}}> when 'true' ->
		      {N,Y}
		  %% Line 15
		  <'none'> when 'true' ->
		      _0
		  ( <_3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_3})
		    -| ['compiler_generated'] )
		end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'handle_message',2}}] )
'loop'/2 =
    %% Line 18
    ( fun (_0,_1) ->
	  do  %% Line 19
	      call 'io':'format'
		  (#{#<99>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<95>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<58>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<126>(8,1,'integer',['unsigned'|['big']]),
		     #<112>(8,1,'integer',['unsigned'|['big']]),
		     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_1|[]])
	      let <Msg> =
		  apply _0
		      (%% Line 20
		       {'bounded',5000})
	      in  let <State2> =
		      apply %% Line 21
			    'handle_message'/2
			  (_1, %% Line 21
			       Msg)
		  in  %% Line 22
		      apply 'loop'/2
			  (_0, State2)
      -| [{'function',{'loop',2}}] )
'start'/1 =
    %% Line 24
    ( fun (_0) ->
	  let <_5> =
	      fun (_2,_1) ->
		  %% Line 25
		  apply 'loop'/2
		      (_1, ( _0
			     -| [{'function',{'start',1}}] ))
	  in  call 'process':'make'
		  (_5)
      -| [{'function',{'start',1}}] )
'do_work'/0 =
    %% Line 28
    ( fun () ->
	  let <Pid> =
	      apply %% Line 29
		    'start'/1
		  (%% Line 29
		   {#{#<104>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']])}#,0})
	  in  %% Line 30
	      call 'erlang':'send'
		  (Pid, {'hello',#{#<106>(8,1,'integer',['unsigned'|['big']]),
				   #<111>(8,1,'integer',['unsigned'|['big']]),
				   #<101>(8,1,'integer',['unsigned'|['big']])}#})
      -| [{'function',{'do_work',0}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('holder')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('holder', ( _0
			   -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end