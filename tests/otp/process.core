module 'process' ['contramap'/2,
		  'make'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'recv'/1,
		  'send'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[112|[114|[111|[99|[101|[115|[115|[46|[101|[114|[108]]]]]]]]]]],1}],
		%% Line 3
		'export_type' =
		    %% Line 3
		    [{'after_time',0}],
		%% Line 4
		'export_type' =
		    %% Line 4
		    [{'recv',1}],
		%% Line 11
		'type' =
		    %% Line 11
		    [{'after_time',{'type',11,'union',[{'atom',11,'infinity'}|[{'type',12,'tuple',[{'atom',12,'bounded'}|[{'type',12,'integer',[]}]]}]]},[]}],
		%% Line 15
		'type' =
		    %% Line 15
		    [{'recv',{'type',15,'fun',[{'type',15,'product',[{'user_type',15,'after_time',[]}]}|[{'remote_type',15,[{'atom',15,'option'}|[{'atom',15,'t'}|[[{'var',15,'Message'}]]]]}]]},[{'var',15,'Message'}]}]]
'recv'/1 =
    %% Line 17
    ( fun (_0) ->
	  let <F> =
	      fun (_1) ->
		  ( letrec
			'recv$^1'/0 =
			    fun () ->
				let <_8,_6> =
				    primop 'recv_peek_message'
					()
				in  case _8 of
				      <'true'> when 'true' ->
					  do  primop 'remove_message'
						  ()
					      %% Line 18
					      {'some',_6}
				      <'false'> when 'true' ->
					  let <_7> =
					      primop 'recv_wait_timeout'
						  (%% Line 18
						   _1)
					  in  case _7 of
						<'true'> when 'true' ->
						    do  primop 'timeout'
							    ()
							%% Line 18
							'none'
						( <'false'> when 'true' ->
						      ( apply 'recv$^1'/0
							    ()
							-| ['dialyzer_ignore'] )
						  -| ['dialyzer_ignore'] )
					      end
				    end
		    in  ( apply 'recv$^1'/0
			      ()
			  -| ['dialyzer_ignore'] )
		    -| ['letrec_goto'] )
	  in  %% Line 19
	      case ( _0
		     -| [{'function',{'recv',1}}] ) of
		%% Line 20
		<'infinity'> when 'true' ->
		    apply F
			('infinity')
		%% Line 21
		<{'bounded',T}> when 'true' ->
		    apply F
			(T)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'recv',1}}] )
'make'/1 =
    %% Line 24
    ( fun (_0) ->
	  let <_3> =
	      fun () ->
		  let <Pid> =
		      call %% Line 26
			   'erlang':%% Line 26
				    'self'
			  ()
		  in  let <_2> = 'recv'/1
		      in  %% Line 27
			  apply ( _0
				  -| [{'function',{'make',1}}] )
			      (Pid, _2)
	  in  call 'erlang':'spawn'
		  (_3)
      -| [{'function',{'make',1}}] )
'send'/2 =
    %% Line 30
    ( fun (_0,_1) ->
	  call 'erlang':'send'
	      (_0, _1)
      -| [{'function',{'send',2}}] )
'contramap'/2 =
    %% Line 32
    ( fun (_0,_1) ->
	  let <_8> =
	      fun (_5,_4) ->
		  %% Line 34
		  case apply _4
			   ('infinity') of
		    %% Line 35
		    <{'some',A}> when 'true' ->
			let <_2> =
			    apply _0
				(A)
			in  apply 'send'/2
				(_1, _2)
		    %% Line 36
		    <'none'> when 'true' ->
			'ok'
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	  in  apply 'make'/1
		  (_8)
      -| [{'function',{'contramap',2}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('process')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('process', ( _0
			    -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end