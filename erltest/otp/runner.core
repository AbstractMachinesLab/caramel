module 'runner' ['module_info'/0,
		 'module_info'/1,
		 'run'/0]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[114|[117|[110|[110|[101|[114|[46|[101|[114|[108]]]]]]]]]],1}]]
'run'/0 =
    %% Line 6
    ( fun () ->
	  let <Pid> =
	      call %% Line 7
		   'adder':%% Line 7
			   'start_link'
		  (%% Line 7
		   10)
	  in  %% Line 8
	      case call 'adder':'add'
		       (Pid, {'add',1}) of
		<{'ok',Reply}> when 'true' ->
		    %% Line 9
		    call 'io':'format'
			(#{#<114>(8,1,'integer',['unsigned'|['big']]),
			   #<101>(8,1,'integer',['unsigned'|['big']]),
			   #<112>(8,1,'integer',['unsigned'|['big']]),
			   #<108>(8,1,'integer',['unsigned'|['big']]),
			   #<121>(8,1,'integer',['unsigned'|['big']]),
			   #<58>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<126>(8,1,'integer',['unsigned'|['big']]),
			   #<112>(8,1,'integer',['unsigned'|['big']])}#, [Reply|[]])
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'run',0}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('runner')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('runner', ( _0
			   -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end