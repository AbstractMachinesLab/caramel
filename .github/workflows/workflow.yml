name: Main workflow

on:
  - push
  - pull_request

jobs:
  create_draft_release:
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_draft_release.outputs.upload_url }}

    steps:
      - name: Create draft release on tags
        id: create_draft_release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  build:
    needs: create_draft_release

    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        ocaml-version:
          - 4.11.1
        skip_test:
          - false

    env:
      SKIP_TEST: ${{ matrix.skip_test }}
      OCAML_VERSION: ${{ matrix.ocaml-version }}
      OS: ${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cached Infra
        uses: actions/cache@v2
        env:
          cache-name: cached-opam
        with:
          path: |
           ~/.opam
           _build
           C:/cygwin/home/runneradmin/.opam
          key: ${{ runner.os }}-${{ matrix.ocaml-version }}-${{ env.cache-name }}-${{ hashFiles('**/*.opam*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ocaml-version }}-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.ocaml-version }}-
            ${{ runner.os }}-

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}

      - name: Set git user
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions-bot@users.noreply.github.com

      - name: Install dependencies
        run: opam exec -- make deps

      - name: Build project
        run: opam exec -- make build

      - name: Run tests
        run: opam exec -- make test

      - name: Check code formatting
        if: ${{ success() && startsWith(runner.os, 'Linux') }}
        run: opam exec -- make fmt

      - name: Create release archive (unix)
        if: ${{ success() && startsWith(github.ref, 'refs/tags/')
                && (startsWith(runner.os, 'Linux')
                   || startsWith(runner.os, 'macOS')) }}
        run: |
          opam exec -- make install
          cp $(opam config var prefix)/bin/caramelc* .
          tar czf tarball.tar.gz caramelc*

      - name: Define tarball name (unix)
        if: ${{ startsWith(github.ref, 'refs/tags/') && runner.os != 'Windows' }}
        run: echo "::set-env name=GITHUB_TAG::${GITHUB_REF#refs/*/}"

      - name: Create release archive (windows)
        if: ${{ success() && startsWith(github.ref, 'refs/tags/')
                && startsWith(runner.os, 'Windows') }}
        run: |
          opam exec -- make install
          Copy-Item -Path C:/cygwin/home/runneradmin/.opam/ocaml-variants.4.11.1+mingw64c\\bin\\caramelc.exe -Destination .
          tar czf tarball.tar.gz caramelc.exe

      - name: Define tag name (windows)
        if: ${{ startsWith(github.ref, 'refs/tags/') && runner.os == 'Windows' }}
        run: |
          $tag = "${{github.ref}}".Split("/")["${{github.ref}}".Split("/").Length -1]
          echo "::set-env name=GITHUB_TAG::$(echo $tag)"

      - name: Upload release tarball
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft_release.outputs.upload_url }}
          asset_path: tarball.tar.gz
          asset_name: caramel-${{ env.GITHUB_TAG }}-${{ runner.os }}.tar.gz
          asset_content_type: application/zip
